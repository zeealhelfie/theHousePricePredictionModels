# Print the model summary
summary(model)
# Use LassoCV to fit a Lasso regression model
library(glmnet)
x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y <- train_data$price
cv_model <- cv.glmnet(x, y, alpha = 1)
plot(cv_model)
# Get the optimal lambda value
lambda_opt <- cv_model$lambda.min
# Fit a Lasso regression model using the optimal lambda value
lasso_model <- glmnet(x, y, alpha = 1, lambda = lambda_opt)
plot(lasso_model, xvar = "lambda")
# Get the coefficients of the Lasso regression model
lasso_coef <- coef(lasso_model)
print(lasso_coef)
# Make predictions on the test set using the Lasso regression model
test_x <- model.matrix(price ~ ., data = test_data)
test_y <- predict(lasso_model, newx = test_x)
# Split data into training and test sets
set.seed(123)
train_index <- createDataPartition(data$price, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Fit a linear regression model to predict price from multiple variables
model <- lm(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
# Print the model summary
summary(model)
# Use LassoCV to fit a Lasso regression model
library(glmnet)
x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y <- train_data$price
cv_model <- cv.glmnet(x, y, alpha = 1)
plot(cv_model)
# Get the optimal lambda value
lambda_opt <- cv_model$lambda.min
# Fit a Lasso regression model using the optimal lambda value
lasso_model <- glmnet(x, y, alpha = 1, lambda = lambda_opt)
plot(lasso_model, xvar = "lambda")
# Get the coefficients of the Lasso regression model
lasso_coef <- coef(lasso_model)
print(lasso_coef)
# Make predictions on the test set using the Lasso regression model
test_x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = test_data)
test_y <- predict(lasso_model, newx = test_x)
test_rmse <- sqrt(mean((test_y - test_data$price)^2))
print(test_rmse)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## libraries
install.packages("moderndive")
library('ggplot2')
library('scales')
library('dplyr')
library('randomForest')
library('data.table')
library('gridExtra')
library('corrplot')
library('e1071')
library(caret)
install.packages("moderndive")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
## libraries
install.packages("moderndive")
library('ggplot2')
library('scales')
library('dplyr')
library('randomForest')
library('data.table')
library('gridExtra')
library('corrplot')
library('e1071')
library(caret)
#import data
data = read.csv("~/Desktop/spring23/math448/project/house_data.csv")
glimpse(data)
# Check if there are any missing values in the data
any(is.na(data))
names(data)
dim(data)
# Perform linear regression of price against all features in the dataset
model = lm(price ~ . - id - date - sqft_basement, data = data)
summary(model)
# linear regression
model = lm(price ~ . - id - date - sqft_basement, data = data)
summary(model)
cor_matrix<-cor(data[,c(3,4,5,6,7,8,9,10,11,12,13)])
cor_matrix
corrplot(cor_matrix)
# Fit a linear regression model to predict price from multiple variables
model <- lm(price ~ bathrooms + sqft_living + sqft_above + grade, data = data)
# Print the model summary
summary(model)
# Fit a linear regression model to predict price from multiple variables
model <- lm(price ~ bathrooms + sqft_living + sqft_above + grade, data = data)
# Print the model summary
summary(model)
# Fit a linear regression model to predict price from multiple variables
model <- lm(price ~ bathrooms + sqft_living + sqft_above + grade, data = data)
# Print the model summary
summary(model)
## libraries
install.packages("moderndive")
library('ggplot2')
library('scales')
library('dplyr')
library('randomForest')
library('data.table')
library('gridExtra')
library('corrplot')
library('e1071')
library(caret)
library(glmnet)
# Define the predictor matrix X and response vector y
X <- model.matrix(model)[,-1]  # remove intercept column
y <- model.response(model)
# Define the predictor matrix X and response vector y
X <- model.matrix(model)[,-1]  # remove intercept column
y <- model.response(model)
# Define the predictor matrix X and response vector y
X <- model.matrix(model)[,-1]  # remove intercept column
y <- model.response(model)
# Split data into training and test sets
set.seed(123)
train_index <- createDataPartition(data$price, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Fit a linear regression model to predict price from multiple variables
model <- lm(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
# Print the model summary
summary(model)
# Use LassoCV to fit a Lasso regression model
library(glmnet)
x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y <- train_data$price
cv_model <- cv.glmnet(x, y, alpha = 1)
plot(cv_model)
# Get the optimal lambda value
lambda_opt <- cv_model$lambda.min
# Fit a Lasso regression model using the optimal lambda value
lasso_model <- glmnet(x, y, alpha = 1, lambda = lambda_opt)
plot(lasso_model, xvar = "lambda")
# Get the coefficients of the Lasso regression model
lasso_coef <- coef(lasso_model)
print(lasso_coef)
# Make predictions on the test set using the Lasso regression model
test_x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = test_data)
test_y <- predict(lasso_model, newx = test_x)
test_rmse <- sqrt(mean((test_y - test_data$price)^2))
print(test_rmse)
x = model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y = data$price
# Fit the Lasso regression model using cross-validation to select the tuning parameter lambda
lasso <- cv.glmnet(X, y, alpha = 1)
# Extract the optimal value of lambda
lambda <- lasso$lambda.min
# Fit the Lasso regression model using the optimal lambda value
lasso_model <- glmnet(X, y, alpha = 1, lambda = lambda)
# Print the coefficients of the Lasso regression model
print(coef(lasso_model))
# Define the predictor matrix X and response vector y
x = model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y = data$price
# Fit the Lasso regression model using cross-validation to select the tuning parameter lambda
lasso = cv.glmnet(X, y, alpha = 1)
# Extract the optimal value of lambda
lambda = lasso$lambda.min
# Fit the Lasso regression model using the optimal lambda value
lasso_model = glmnet(X, y, alpha = 1, lambda = lambda)
summary(lasso_model)
# Print the coefficients of the Lasso regression model
#print(coef(lasso_model))
# Define the predictor matrix X and response vector y
x = model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y = data$price
# Fit the Lasso regression model using cross-validation to select the tuning parameter lambda
lasso = cv.glmnet(X, y, alpha = 1)
# Extract the optimal value of lambda
lambda = lasso$lambda.min
lambda
# Fit the Lasso regression model using the optimal lambda value
lasso_model = glmnet(X, y, alpha = 1, lambda = lambda)
summary(lasso_model)
# Print the coefficients of the Lasso regression model
#print(coef(lasso_model))
# Split data into training and test sets
set.seed(123)
train_index <- createDataPartition(data$price, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Fit a linear regression model to predict price from multiple variables
model <- lm(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
# Print the model summary
summary(model)
# Use LassoCV to fit a Lasso regression model
x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y <- train_data$price
cv_model <- cv.glmnet(x, y, alpha = 1)
plot(cv_model)
# Get the optimal lambda value
lambda_opt <- cv_model$lambda.min
lambda_opt
# Fit a Lasso regression model using the optimal lambda value
lasso_model <- glmnet(x, y, alpha = 1, lambda = lambda_opt)
plot(lasso_model, xvar = "lambda")
# Get the coefficients of the Lasso regression model
lasso_coef <- coef(lasso_model)
print(lasso_coef)
# Make predictions on the test set using the Lasso regression model
test_x <- model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = test_data)
test_y <- predict(lasso_model, newx = test_x)
test_rmse <- sqrt(mean((test_y - test_data$price)^2))
print(test_rmse)
# Define the predictor matrix X and response vector y
x = model.matrix(price ~ bathrooms + sqft_living + sqft_above + grade, data = train_data)
y = data$price
# Fit the Lasso regression model using cross-validation to select the tuning parameter lambda
lasso = cv.glmnet(X, y, alpha = 1)
# Extract the optimal value of lambda
lambda = lasso$lambda.min
lambda
# Fit the Lasso regression model using the optimal lambda value
lasso_model = glmnet(X, y, alpha = 1, lambda = lambda)
# Print the coefficients of the Lasso regression model
print(coef(lasso_model))
# Split data into 80% training and 20% testing
set.seed(123) # for reproducibility
trainIndex <- createDataPartition(data$price, p = .8, list = FALSE)
data_train <- data[trainIndex, ]
data_test <- data[-trainIndex, ]
# Fit a linear regression model to predict price from multiple variables using training data
model <- lm(price ~ sqft_living + grade, data = data_train)
# Print the model summary
summary(model)
# Split data into 70% training and 30% testing
set.seed(123) # for reproducibility
trainIndex = createDataPartition(data$price, p = .8, list = FALSE)
data_train = data[trainIndex, ]
data_test = data[-trainIndex, ]
# Fit a linear regression model to predict price from multiple variables using training data
model <- lm(price ~ sqft_living + grade, data = data_train)
# Print the model summary
summary(model)
# Split data into 70% training and 30% testing
set.seed(123) # for reproducibility
trainIndex = createDataPartition(data$price, p = .7, list = FALSE)
data_train = data[trainIndex, ]
data_test = data[-trainIndex, ]
# Fit a linear regression model to predict price from multiple variables using training data
model <- lm(price ~ sqft_living + grade, data = data_train)
# Print the model summary
summary(model)
# Fit a linear regression model to predict price from multiple variables using training data
model <- lm(price ~ sqft_living + grade, data = data_train)
# Print the model summary
summary(model)
# Split data into 70% training and 30% testing
set.seed(123) # for reproducibility
trainIndex = createDataPartition(data$price, p = .7, list = FALSE)
data_train = data[trainIndex, ]
data_test = data[-trainIndex, ]
# Fit a linear regression model to predict price from multiple variables using training data
model <- lm(price ~ sqft_living + grade, data = data_train)
# Print the model summary
summary(model)
# Generate predicted values for the test data using the model
liny_pred = predict(model, newdata = data_test)
# Calculate the MSE
lin_mse = mean((data_test$price - liny_pred)^2)
# Calculate the RMSE
lin_rmse = sqrt(lin_mse)
# Calculate the MAE
lin_mae = mean(abs(data_test$price - liny_pred))
# Print the MSE, RMSE, and MAE
cat("MSE:", lin_mse, "\n")
cat("RMSE:", lin_rmse, "\n")
cat("MAE:", lin_mae, "\n")
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price = data_train$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Generate predicted values for the test data using the model
liny_pred = predict(model_norm, newdata = data_test)
# Calculate the MSE
lin_mse = mean((data_test$price - liny_pred)^2)
# Calculate the RMSE
lin_rmse = sqrt(lin_mse)
# Calculate the MAE
lin_mae = mean(abs(data_test$price - liny_pred))
# Print the MSE, RMSE, and MAE
cat("MSE:", lin_mse, "\n")
cat("RMSE:", lin_rmse, "\n")
cat("MAE:", lin_mae, "\n")
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price = data_train$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ ., data = data_train_norm)
# Print the model summary
summary(model_norm)
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price = data_train$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Generate predicted values for the test data using the model
liny_pred = predict(model_norm, newdata = data_test)
# Calculate the MSE
lin_mse = mean((data_test$price - liny_pred)^2)
# Calculate the RMSE
lin_rmse = sqrt(lin_mse)
# Calculate the MAE
lin_mae = mean(abs(data_test$price - liny_pred))
# Print the MSE, RMSE, and MAE
cat("MSE:", lin_mse, "\n")
cat("RMSE:", lin_rmse, "\n")
cat("MAE:", lin_mae, "\n")
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price = data_train$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
data_train_norm$price = data_train$price
# Normalize the predictors in the data_test data frame
data_test_norm = as.data.frame(scale(data_test[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_test_norm$price = data_test$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
data_train_norm$price = data_train$price
# Normalize the predictors in the data_test data frame
data_test_norm = as.data.frame(scale(data_test[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_test_norm$price = data_test$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Generate predicted values for the normalized test data using the model
y_pred_norm <- predict(model_norm, newdata = data_test_norm)
# De-normalize the predicted values back to the original scale
y_pred <- y_pred_norm * attr(data_train[, c("sqft_living", "grade")], "scaled:scale")[2] + attr(data_train[, c("sqft_living", "grade")], "scaled:center")[2]
# Calculate the MSE, RMSE, and MAE
mse <- mean((data_test$price - y_pred)^2)
rmse <- sqrt(mse)
mae <- mean(abs(data_test$price - y_pred))
# Print the MSE, RMSE, and MAE
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Generate predicted values for the normalized test data using the model
y_pred_norm <- predict(model_norm, newdata = data_test_norm)
# De-normalize the predicted values back to the original scale
y_pred <- y_pred_norm * attr(data_train[, c("sqft_living", "grade")], "scaled:scale")[2] + attr(data_train[, c("sqft_living", "grade")], "scaled:center")[2]
# Check for missing or undefined values in the actual and predicted data
any(is.na(data_test$price))  # check for missing values in the actual test data
any(is.na(y_pred))  # check for missing values in the predicted test data
# Calculate the MSE, RMSE, and MAE using non-missing values
mse <- mean((data_test$price[!is.na(data_test$price)] - y_pred[!is.na(y_pred)])^2)
rmse <- sqrt(mse)
mae <- mean(abs(data_test$price[!is.na(data_test$price)] - y_pred[!is.na(y_pred)]))
# Print the MSE, RMSE, and MAE
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Normalize the predictors in the data_test data frame using the same scaling parameters as the data_train data frame
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:center"), scale = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:scale")))
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Normalize the predictors in the data_test data frame using the same scaling parameters as the data_train data frame
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:center"), scale = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:scale")))
# Split data into 70% training and 30% testing
set.seed(123) # for reproducibility
trainIndex = createDataPartition(data$price, p = .7, list = FALSE)
data_train = data[trainIndex, ]
data_test = data[-trainIndex, ]
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Normalize the predictors in the data_test data frame using the same scaling parameters as the data_train data frame
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:center"), scale = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:scale")))
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
data_train_norm$price = data_train$price
# Normalize the predictors in the data_test data frame
data_test_norm = as.data.frame(scale(data_test[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_test_norm$price = data_test$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Normalize the predictors in the data_test data frame using the same scaling parameters as the data_train data frame
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:center"), scale = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:scale")))
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Normalize the predictors in the data_test data frame using the same scaling parameters as the data_train data frame
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:center"), scale = attr(data_train_norm[, c("sqft_living", "grade")], "scaled:scale"), colnames = c("sqft_living", "grade")))
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Calculate the scaling parameters for the predictors in the training data
center <- attr(data_train_norm[, c("sqft_living", "grade")], "scaled:center")
scale <- attr(data_train_norm[, c("sqft_living", "grade")], "scaled:scale")
# Normalize the predictors in the data_test data frame using the scaling parameters from the training data
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = center, scale = scale))
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Calculate the scaling parameters for the predictors in the training data
center <- apply(data_train[, c("sqft_living", "grade")], 2, mean)
scale <- apply(data_train[, c("sqft_living", "grade")], 2, sd)
# Normalize the predictors in the data_test data frame using the scaling parameters from the training data
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = center, scale = scale))
# Add the price variable back to the normalized data frame
data_test_norm$price <- data_test$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm <- lm(price ~ sqft_living + grade, data = data_train_norm)
# Generate predicted values for the normalized test data using the model
y_pred_norm <- predict(model_norm, newdata = data_test_norm)
# De-normalize the predicted values back to the original scale
y_pred <- y_pred_norm * scale[2] + center[2]
# Calculate the MSE, RMSE, and MAE
mse <- mean((data_test$price - y_pred)^2)
rmse <- sqrt(mse)
mae <- mean(abs(data_test$price - y_pred))
# Print the MSE, RMSE, and MAE
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Normalize the predictors in the data_train data frame
data_train_norm <- as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_train_norm$price <- data_train$price
# Calculate the scaling parameters for the predictors in the training data
center <- apply(data_train[, c("sqft_living", "grade")], 2, mean)
scale <- apply(data_train[, c("sqft_living", "grade")], 2, sd)
# Normalize the predictors in the data_test data frame using the scaling parameters from the training data
data_test_norm <- as.data.frame(scale(data_test[, c("sqft_living", "grade")], center = center, scale = scale))
# Add the price variable back to the normalized data frame
data_test_norm$price <- data_test$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm <- lm(price ~ sqft_living + grade, data = data_train_norm)
# Generate predicted values for the normalized test data using the model
y_pred_norm <- predict(model_norm, newdata = data_test_norm)
# De-normalize the predicted values back to the original scale
y_pred <- y_pred_norm * scale[2] + center[2]
# Calculate the MSE, RMSE, and MAE
mse <- mean((data_test$price - y_pred)^2)
rmse <- sqrt(mse)
mae <- mean(abs(data_test$price - y_pred))
# Print the MSE, RMSE, and MAE
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
# Normalize the predictors in the data_train data frame
data_train_norm = as.data.frame(scale(data_train[, c("sqft_living", "grade")]))
data_train_norm$price = data_train$price
# Normalize the predictors in the data_test data frame
data_test_norm = as.data.frame(scale(data_test[, c("sqft_living", "grade")]))
# Add the price variable back to the normalized data frame
data_test_norm$price = data_test$price
# Fit a linear regression model to predict price from the normalized predictors using training data
model_norm = lm(price ~ sqft_living + grade, data = data_train_norm)
# Print the model summary
summary(model_norm)
# Generate predicted values for the normalized test data using the model
y_pred_norm <- predict(model_norm, newdata = data_test_norm)
# De-normalize the predicted values back to the original scale
y_pred <- y_pred_norm * attr(data_train[, c("sqft_living", "grade")], "scaled:scale")[2] + attr(data_train[, c("sqft_living", "grade")], "scaled:center")[2]
# Check for missing or undefined values in the actual and predicted data
any(is.na(data_test$price))  # check for missing values in the actual test data
any(is.na(y_pred))  # check for missing values in the predicted test data
# Calculate the MSE, RMSE, and MAE using non-missing values
mse <- mean((data_test$price[!is.na(data_test$price)] - y_pred[!is.na(y_pred)])^2)
rmse <- sqrt(mse)
mae <- mean(abs(data_test$price[!is.na(data_test$price)] - y_pred[!is.na(y_pred)]))
# Print the MSE, RMSE, and MAE
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
